version: "3.8"

x-cors-origin: &cors-origin
  CORS_ORIGIN: ${CORS_ORIGIN}

x-aws-region: &aws-region
  AWS_REGION: ${AWS_REGION}

services:
  ui:
    image: "thanh1994/elearn-ui"
    build:
      context: ./ui
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - 80:80
    # environment:
    #   REACT_APP_COURSE_SERVICE_URL: ${REACT_APP_COURSE_SERVICE_URL}
    #   REACT_APP_PAYMENT_SERVICE_URL: ${REACT_APP_PAYMENT_SERVICE_URL}
    #   REACT_APP_AUTH_SERVICE_URL: ${REACT_APP_AUTH_SERVICE_URL}
    #   REACT_APP_STRIPE_PK: ${REACT_APP_STRIPE_PK}
    #   REACT_APP_PLAYGROUND_URL: ${REACT_APP_PLAYGROUND_URL}
    networks:
      - default

  auth_service:
    image: "thanh1994/elearn-auth-service"
    build:
      context: ./auth_service
      dockerfile: Dockerfile
    restart: unless-stopped
    read_only: true
    ports:
      - 4020:4020
    environment:
      <<: [*cors-origin, *aws-region]
      ENV: ${ENV}
      COGNITO_USER_POOL_ID: ${COGNITO_USER_POOL_ID}
      COGNITO_CLIENT_ID: ${COGNITO_CLIENT_ID}
      REDIS_URL: ${REDIS_URL}
      COGNITO_IDENTITY_POOL_ID: ${COGNITO_IDENTITY_POOL_ID}
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - default

  course_service:
    image: "thanh1994/elearn-course-service"
    build:
      context: ./course_service
      dockerfile: Dockerfile
    restart: unless-stopped
    read_only: true
    ports:
      - 4000:4000
    environment:
      <<: [*cors-origin, *aws-region]
      ENV: ${ENV}
      DYNAMODB_TABLE: ${DYNAMODB_TABLE}
      S3_BUCKET: ${S3_BUCKET}
      MONGODB_DATABASE_URL: ${MONGODB_DATABASE_URL}
      MONGODB_DATABASE_NAME: ${MONGODB_DATABASE_NAME}
      AUTH_SERVICE_URL: ${AUTH_SERVICE_URL}
      COGNITO_IDENTITY_POOL_ID: ${COGNITO_IDENTITY_POOL_ID}
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - default

  payment_service:
    image: "thanh1994/elearn-payment-service"
    build:
      context: ./payment_service
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - 4010:4010
    read_only: true
    environment:
      <<: *cors-origin
      MONGODB_DATABASE_URL: ${MONGODB_DATABASE_URL}
      STRIPE_SECRET: ${STRIPE_SECRET}
      COURSE_SERVICE_URL: ${COURSE_SERVICE_URL}
      PAYMENT_SUCCESS_URL: ${PAYMENT_SUCCESS_URL}
      PAYMENT_CANCEL_URL: ${PAYMENT_CANCEL_URL}
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - default

  playground_service:
    image: "thanh1994/elearn-playground-service"
    build:
      context: ./playground_service
      dockerfile: Dockerfile
    restart: unless-stopped
    read_only: true
    ports:
      - 4030:4030
    environment:
      <<: *cors-origin
      TTYD_SERVICE_URL: ${TTYD_SERVICE_URL}
    volumes:
      - ${KUBE_CONFIG_PATH:-./playground_service/kind-config.yaml}:/root/.kube/config
    networks:
      - minikube

  mongodb:
    image: public.ecr.aws/docker/library/mongo:8.0.5-rc2-noble
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGODB_INITDB_ROOT_USERNAME: root
      MONGODB_INITDB_ROOT_PASSWORD: root
    volumes:
      - mongo_data:/data/db
    command: "mongod --bind_ip_all"
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.runCommand({ping:1})"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - default

  redis:
    image: "redis:6.2"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - default

volumes:
  mongo_data:
  redis_data:

networks:
  default:
    # Docker Compose will not create these networks itself.
    # Instead, it assumes they already exist in your Docker environment,
    # and it will attach the services in your Compose file to these pre-existing networks.
  minikube:
    external: true
